# -*- coding: utf-8 -*-
"""Q1.Ploy_reg_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mew3mXDuPdoixRhrh7j1JxkM8ncXByGU

# Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import csv
from google.colab import  drive
drive.mount('/drive')
# from google.colab import files

"""# Import Data Sets"""

trainingDataSet = pd.read_csv('linear_reg_train_data.csv')
X_train = trainingDataSet.iloc[:, :-1].values
Y_train = trainingDataSet.iloc[:, -1:].values

testDataSet = pd.read_csv('linear_reg_test_data.csv')
X_test = testDataSet.iloc[:, :-1].values
Y_test = testDataSet.iloc[:, -1:].values

X_train_copy = X_train.copy()
X_test_copy = X_test.copy()

"""# Global variables"""

degree = 12
training_examples = X_train.shape[0]
test_examples = X_test.shape[0]
features = degree + 1
lambda_rr = 5

"""# Mean Square Error"""

def mse(Y, Y_predicted):
  cost = np.sum((Y - Y_predicted)**2) / len(Y)
  return cost

"""# Write Into CSV"""

def writeToCSV(path, data):
  with open(path, 'w') as f:
    writer = csv.writer(f)
    for word in data:
        writer.writerow(word)

"""# Transform DataSet"""

def transform(X,examples):
  X_copy = X;
  for i in range(2,degree+1):
    X = np.append(X, X_copy**i, axis = 1)
  return X #Phi

X_train_transformed = transform(X_train,training_examples)
X_train_transformed = np.append(np.ones((training_examples,1)), X_train_transformed, axis = 1)

X_test_transformed = transform(X_test,test_examples)
X_test_transformed = np.append(np.ones((test_examples,1)), X_test_transformed, axis = 1)

"""# Predict function"""

def predict(X,W):
  return np.dot(X,W)

"""# Learning model

## Normal Equation
"""

def fit(X,Y):
  # w = np.dot(np.linalg.inv(np.dot(X.T, X)), np.dot(X.T, Y))
  # w = np.linalg.pinv(X.T @ X) @ X.T @ Y
  w = np.dot(X.T, X) + 0 
  w = np.linalg.inv(w)
  w = np.dot(w, np.dot(X.T,Y))
  return w

weights = fit(X_train_transformed, Y_train)

print("Weights")
print(weights)

"""## Ridge Regression"""

def fit_ridge(X, Y):
  w = np.dot(X.T, X) + lambda_rr * np.identity(degree + 1, dtype=None)
  w = np.linalg.inv(w)
  w = np.dot(w, np.dot(X.T,Y))
  return w

weights_rr = fit_ridge(X_train_transformed, Y_train)

print(weights_rr)

"""# Prediction

## Normal Equation
"""

Y_pred_train = predict(X_train_transformed, weights)
writeToCSV('/drive/My Drive/PRML/Assignment1/Q1/1a_train_cf.csv', Y_pred_train)

Y_pred_test = predict(X_test_transformed, weights)
writeToCSV('/drive/My Drive/PRML/Assignment1/Q1/1a_test_cf.csv', Y_pred_test)

print(degree)
print(mse(Y_train, Y_pred_train))
print(mse(Y_test, Y_pred_test))

"""## Ridge Regression"""

Y_pred_train_rr = predict(X_train_transformed, weights_rr)
writeToCSV('/drive/My Drive/PRML/Assignment1/Q1/1a_train_rr.csv', Y_pred_train_rr)

Y_pred_test_rr = predict(X_test_transformed, weights_rr)
writeToCSV('/drive/My Drive/PRML/Assignment1/Q1/1a_test_rr.csv', Y_pred_test_rr)

print("Ridge " + str(degree))
print(mse(Y_train, Y_pred_train_rr))
print(mse(Y_test, Y_pred_test_rr))

"""# Plot graphs

## Normal Equation
"""

plt.scatter(X_train_copy, Y_train, color = 'red', label = 'Input X')
X_train_copy_plot, Y_pred_train_plot = zip(*sorted(zip(X_train_copy, Y_pred_train)))
plt.plot(X_train_copy_plot, Y_pred_train_plot, color = 'blue', label = 'True value')
X_test_copy_plot, Y_pred_test_plot = zip(*sorted(zip(X_test_copy, Y_pred_test)))
plt.plot(X_test_copy_plot, Y_pred_test_plot, color = 'green', label = 'Predicted value')
plt.title('Polynomial Regression using normal equation on train data| Degree = '+ str(degree))
plt.legend(loc="upper right")
plt.xlabel('x')
plt.ylabel('y')
plt.show()

plt.scatter(X_test_copy, Y_test, color = 'red', label = 'Input X_test')
X_train_copy_plot, Y_pred_train_plot = zip(*sorted(zip(X_train_copy, Y_pred_train)))
plt.plot(X_train_copy_plot, Y_pred_train_plot, color = 'blue', label = 'True value')
X_test_copy_plot, Y_pred_test_plot = zip(*sorted(zip(X_test_copy, Y_pred_test)))
plt.plot(X_test_copy_plot, Y_pred_test_plot, color = 'green', label = 'Predicted value')
plt.title('Polynomial Regression using normal equation on test data | Degree = '+ str(degree))
plt.legend(loc="upper right")
plt.xlabel('x')
plt.ylabel('y')
plt.show()

"""## Ridge Regression"""

plt.scatter(X_train_copy, Y_train, color = 'red', label = 'Input X')
X_train_copy_plot, Y_pred_train_rr_plot = zip(*sorted(zip(X_train_copy, Y_pred_train_rr)))
plt.plot(X_train_copy_plot, Y_pred_train_rr_plot, color = 'blue', label = 'True value')
X_test_copy_plot, Y_pred_test_rr_plot = zip(*sorted(zip(X_test_copy, Y_pred_test_rr)))
plt.plot(X_test_copy_plot, Y_pred_test_rr_plot, color = 'green', label = 'Predicted value')
plt.title('Polynomial Regression using Ridge Regression on train data| Degree = '+ str(degree))
plt.legend(loc="upper right")
plt.xlabel('x')
plt.ylabel('y')
plt.show()

plt.scatter(X_test_copy, Y_test, color = 'red', label = 'Input X_test')
X_train_copy_plot, Y_pred_train_rr_plot = zip(*sorted(zip(X_train_copy, Y_pred_train_rr)))
plt.plot(X_train_copy_plot, Y_pred_train_rr_plot, color = 'blue', label = 'True value')
X_test_copy_plot, Y_pred_test_rr_plot = zip(*sorted(zip(X_test_copy, Y_pred_test_rr)))
plt.plot(X_test_copy_plot, Y_pred_test_rr_plot, color = 'green', label = 'Predicted value')
plt.title('Polynomial Regression using ridge regression on test data | Degree = '+ str(degree))
plt.legend(loc="upper right")
plt.xlabel('x')
plt.ylabel('y')
plt.show()